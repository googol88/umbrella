[{"/Users/ronald/github/hackmcst-starter/react-ui/src/index.js":"1","/Users/ronald/github/hackmcst-starter/react-ui/src/serviceWorker.js":"2","/Users/ronald/github/hackmcst-starter/react-ui/src/App.js":"3","/Users/ronald/github/lennon-wall/react-ui/src/index.js":"4","/Users/ronald/github/lennon-wall/react-ui/src/reportWebVitals.js":"5","/Users/ronald/github/lennon-wall/react-ui/src/App.js":"6","/Users/ronald/github/lennon-wall/react-ui/src/serviceWorker.js":"7","/Users/ronald/github/lennon-wall/react-ui/src/ColorModeSwitcher.js":"8","/Users/ronald/github/lennon-wall/react-ui/src/Logo.js":"9","/Users/ronald/github/lennon-wall/react-ui/src/components/StickyGrid.js":"10","/Users/ronald/github/lennon-wall/react-ui/src/components/DrawModal.js":"11"},{"size":840,"mtime":1611930709534,"results":"12","hashOfConfig":"13"},{"size":5081,"mtime":1611930709536,"results":"14","hashOfConfig":"13"},{"size":3750,"mtime":1611931973307,"results":"15","hashOfConfig":"13"},{"size":820,"mtime":1614735198077,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1611931086000,"results":"18","hashOfConfig":"17"},{"size":6127,"mtime":1614820734364,"results":"19","hashOfConfig":"17"},{"size":5081,"mtime":1611931086000,"results":"20","hashOfConfig":"17"},{"size":617,"mtime":1611931086000,"results":"21","hashOfConfig":"17"},{"size":489,"mtime":1611931086000,"results":"22","hashOfConfig":"17"},{"size":1570,"mtime":1614947415895,"results":"23","hashOfConfig":"17"},{"size":3454,"mtime":1612307068684,"results":"24","hashOfConfig":"17"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"6g9u67",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},"1k5lvty",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"/Users/ronald/github/hackmcst-starter/react-ui/src/index.js",[],"/Users/ronald/github/hackmcst-starter/react-ui/src/serviceWorker.js",[],"/Users/ronald/github/hackmcst-starter/react-ui/src/App.js",["51"],"/Users/ronald/github/lennon-wall/react-ui/src/index.js",["52"],"import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <>\n    <ColorModeScript />\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["53","54"],"/Users/ronald/github/lennon-wall/react-ui/src/reportWebVitals.js",[],"/Users/ronald/github/lennon-wall/react-ui/src/App.js",["55","56"],"import React, {  } from 'react';\nimport {\n  ChakraProvider,\n  Box,\n  VStack,\n  Grid,\n  Input,\n  Text,\n  theme,\n} from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport './App.css';\nimport StickyGrid from './components/StickyGrid';\nimport $ from 'jquery';\nimport DrawModal from './components/DrawModal';\n//import sendPostIt from './api.js';\n\nlet finalArray = [];\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: null,\n      isFetching: null,\n      data: null,\n      url: 'http://localhost:5000/postit.json',\n      value: '',\n      stickies: [],\n      colors: [\"purple\", \"yellow\", \"orange\", \"red\", \"blue\"],\n      drawingUrl: \"\",\n    }\n    this.fetchData = this.fetchData.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.addSticky = this.addSticky.bind(this);\n    this.sendPostIt = this.sendPostIt.bind(this);\n    this.fetchPostIt = this.fetchPostIt.bind(this);\n  }\n  /*const [message, setMessage] = useState(null);\n  const [isFetching, setIsFetching] = useState(false);\n  const [url, setUrl] = useState('/api');*/\n  \n  fetchData() {\n    fetch(this.state.url)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`status ${response.status}`);\n        }\n        return response.json();\n      })\n      .then(json => {\n        this.setState({stickies: Object.values({...json}), message: '200 OK', isFetching: false}, () => console.log(this.state.stickies));\n      }).catch(e => {\n        this.setState({message: `API call failed: ${e}`, isFetching: false});\n        console.log(this.state.message);\n      })\n  };\n\n  componentDidMount() {\n    this.setState({isFetching: true});\n    this.fetchData();\n    console.log(\"Hello?\");\n    // Will. put jquery stuff there\n    // https://reactjs.org/docs/integrating-with-other-libraries.html\n  }\n\n  addSticky = (value, isImage) => {\n    this.setState(state => {\n      const randColor = this.state.colors[Math.floor(Math.random()*this.state.colors.length)];\n      const stickies = state.stickies.concat({isImage: isImage, value: value, color: randColor});\n      /*value, color, x, y, isImage, imageValue*/\n      this.sendPostIt(isImage, value, randColor, 0, 0);\n      //this.fetchData();\n      return {stickies};\n    });\n  }\n  handleChange(e) {\n    this.setState({value: e.target.value});\n  }\n  handleSubmit(e) {\n    this.addSticky(this.state.value, false);\n    this.setState({value: ''});\n    /*this.setState((message) => { \n      let stickyMessage = e.target.value;\n      alert(stickyMessage);\n      return {stickyMessage}\n    });*/\n    //alert(this.state.stickyMessage);\n    e.preventDefault();\n  }\n\n  updateDrawing(drawing) {\n    console.log(drawing);\n    this.setState({drawingUrl: drawing});\n    this.addSticky(drawing, true);\n  }\n  \n  sendPostIt(isImage, value, color, x, y){\n    /*\n    var request = new XMLHttpRequest();\n    request.open('GET', '/my/url', true);\n\n    request.onload = function() {\n      if (request.status >= 200 && request.status < 400) {\n        // Success!\n        var data = JSON.parse(request.responseText);\n      } else {\n        // We reached our target server, but it returned an error\n\n      }\n    };\n\n    request.onerror = function() {\n      // There was a connection error of some sort\n    };\n\n    request.send();\n    */\n   $.getJSON(\"http://localhost:5000/postpostit?isImage=\" + isImage + \"&value=\" + value + \"&color=\" + color + \"&x=\" + x + \"&y=\" + y, ()=>{})\n  }\n  fetchPostIt(){\n    /*fetch(`http://localhost:5000/postit.json`)\n      .then(res => res.json())\n      .then(json => {\n        console.log(json);\n        this.setState({ data: json });\n      });*/\n    /*$.getJSON(\"http://localhost:5000/postit.json\", data=>{\n      //not hacky code shut up\n      let i = 0;\n \n      console.log(data);\n      let iterator = 0;\n      // let index = 0;\n      let addThis = {};\n \n      console.log(Object.keys(data));\n      console.log(Object.keys(data).length);\n      for(var index = 0; index < Object.keys(data).length; index++){\n        if(iterator==0){\n          addThis.name = data[Object.keys(data)[index]].value;\n          console.log(data[Object.keys(data)[index]].value);\n          iterator++;\n        }else if(iterator==1){\n          addThis.color = data[Object.keys(data)[index]].color;\n          console.log(addThis.color);\n          iterator++;\n        }else if(iterator==2){\n          addThis.x = data[Object.keys(data)[index]].x;\n          console.log(addThis.x);\n          iterator++;\n        }else if(iterator==3){\n          addThis.y = data[Object.keys(data)[index]].y;\n          console.log(addThis.y);\n          iterator++;\n        }else if(iterator==4){\n          console.log(addThis);\n          \n          addThis.imageValue =  data[Object.keys(data)[index]].imageValue;\n          finalArray[i] = addThis; addThis = {}; i++;\n          iterator = 0;\n        }\n      }\n    })*/\n  }\n  \n  render() {\n    return (\n      <ChakraProvider theme={theme}>\n        <Box textAlign=\"center\" fontSize=\"xl\">\n          <Grid minH=\"100vh\" p={3}>\n            <ColorModeSwitcher justifySelf=\"flex-end\" />\n            <VStack spacing={8}>\n              <StickyGrid stickies={this.state.stickies} /> {/*handleSubmit={drawing => this.updateDrawing(drawing)}*/}\n              {/*<Box position=\"absolute\" top=\"10\">\n                <Text>{'Â« '}\n                  {this.state.isFetching\n                    ? 'Fetching message from API'\n                    : this.state.message}\n                {' Â»'}</Text>\n              </Box>*/}\n              <Box position=\"absolute\" bottom=\"10\">\n                <form onSubmit={this.handleSubmit} style={{display: 'inline-block'}}>\n                  <Input placeholder=\"Enter message\" value={this.state.value} onChange={this.handleChange}></Input>\n                </form>\n                <DrawModal\n                  handleSubmit={(drawing) => this.updateDrawing(drawing)}\n                />\n              </Box>\n            </VStack>\n          </Grid>\n        </Box>\n      </ChakraProvider>\n    );\n  }\n}\n\nexport default App;","/Users/ronald/github/lennon-wall/react-ui/src/serviceWorker.js",[],"/Users/ronald/github/lennon-wall/react-ui/src/ColorModeSwitcher.js",[],"/Users/ronald/github/lennon-wall/react-ui/src/Logo.js",[],["57","58"],"/Users/ronald/github/lennon-wall/react-ui/src/components/StickyGrid.js",[],"/Users/ronald/github/lennon-wall/react-ui/src/components/DrawModal.js",[],{"ruleId":"59","severity":1,"message":"60","line":18,"column":15,"nodeType":"61","messageId":"62","endLine":18,"endColumn":21},{"ruleId":"59","severity":1,"message":"63","line":2,"column":17,"nodeType":"61","messageId":"62","endLine":2,"endColumn":27},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"59","severity":1,"message":"68","line":8,"column":3,"nodeType":"61","messageId":"62","endLine":8,"endColumn":7},{"ruleId":"59","severity":1,"message":"69","line":18,"column":5,"nodeType":"61","messageId":"62","endLine":18,"endColumn":15},{"ruleId":"64","replacedBy":"70"},{"ruleId":"66","replacedBy":"71"},"no-unused-vars","'setUrl' is assigned a value but never used.","Identifier","unusedVar","'StrictMode' is defined but never used.","no-native-reassign",["72"],"no-negated-in-lhs",["73"],"'Text' is defined but never used.","'finalArray' is assigned a value but never used.",["72"],["73"],"no-global-assign","no-unsafe-negation"]