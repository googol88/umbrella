[{"/Users/ronald/github/hackmcst-starter/react-ui/src/index.js":"1","/Users/ronald/github/hackmcst-starter/react-ui/src/serviceWorker.js":"2","/Users/ronald/github/hackmcst-starter/react-ui/src/App.js":"3","/Users/ronald/github/lennon-wall/react-ui/src/index.js":"4","/Users/ronald/github/lennon-wall/react-ui/src/reportWebVitals.js":"5","/Users/ronald/github/lennon-wall/react-ui/src/App.js":"6","/Users/ronald/github/lennon-wall/react-ui/src/serviceWorker.js":"7","/Users/ronald/github/lennon-wall/react-ui/src/ColorModeSwitcher.js":"8","/Users/ronald/github/lennon-wall/react-ui/src/Logo.js":"9","/Users/ronald/github/lennon-wall/react-ui/src/components/StickyGrid.js":"10","/Users/ronald/github/lennon-wall/react-ui/src/components/DrawModal.js":"11"},{"size":840,"mtime":1611930709534,"results":"12","hashOfConfig":"13"},{"size":5081,"mtime":1611930709536,"results":"14","hashOfConfig":"13"},{"size":3750,"mtime":1611931973307,"results":"15","hashOfConfig":"13"},{"size":840,"mtime":1611931086000,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1611931086000,"results":"18","hashOfConfig":"17"},{"size":9352,"mtime":1612794552107,"results":"19","hashOfConfig":"17"},{"size":5081,"mtime":1611931086000,"results":"20","hashOfConfig":"17"},{"size":617,"mtime":1611931086000,"results":"21","hashOfConfig":"17"},{"size":489,"mtime":1611931086000,"results":"22","hashOfConfig":"17"},{"size":2756,"mtime":1613277175529,"results":"23","hashOfConfig":"17"},{"size":3454,"mtime":1612307068684,"results":"24","hashOfConfig":"17"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"6g9u67",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"1k5lvty",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"33"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"/Users/ronald/github/hackmcst-starter/react-ui/src/index.js",[],"/Users/ronald/github/hackmcst-starter/react-ui/src/serviceWorker.js",[],"/Users/ronald/github/hackmcst-starter/react-ui/src/App.js",["50"],"/Users/ronald/github/lennon-wall/react-ui/src/index.js",[],["51","52"],"/Users/ronald/github/lennon-wall/react-ui/src/reportWebVitals.js",[],"/Users/ronald/github/lennon-wall/react-ui/src/App.js",["53"],"import React, {  } from 'react';\nimport {\n  ChakraProvider,\n  Box,\n  VStack,\n  Grid,\n  Input,\n  Text,\n  theme,\n} from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport './App.css';\nimport StickyGrid from './components/StickyGrid';\nimport $ from 'jquery';\nimport DrawModal from './components/DrawModal';\n//import sendPostIt from './api.js';\n\nlet finalArray = [];\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: null,\n      isFetching: null,\n      data: null,\n      url: 'http://localhost:5000/postit.json',\n      value: '',\n      stickies: [],\n      colors: [\"purple\", \"yellow\", \"orange\", \"red\", \"blue\"],\n      drawingUrl: \"\",\n    }\n    this.fetchData = this.fetchData.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.addSticky = this.addSticky.bind(this);\n    this.sendPostIt = this.sendPostIt.bind(this);\n    this.fetchPostIt = this.sendPostIt.bind(this);\n  }\n  /*const [message, setMessage] = useState(null);\n  const [isFetching, setIsFetching] = useState(false);\n  const [url, setUrl] = useState('/api');*/\n  \n  fetchData() {\n    fetch(this.state.url)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`status ${response.status}`);\n        }\n        return response.json();\n      })\n      .then(json => {\n        this.setState({message: json.message, isFetching: false}, () => console.log(this.state.message));\n        console.log(\"Should be good\");\n        /*setMessage(json.message)\n        this.setIsFetching(false);*/\n      }).catch(e => {\n        this.setState({message: `API call failed: ${e}`, isFetching: false});\n        /*setMessage(`API call failed: ${e}`);\n        setIsFetching(false);*/\n      })\n  };\n\n  /*useEffect(() => {\n    setIsFetching(true);\n    fetchData();\n  }, [fetchData]);*/\n\n  componentDidMount() {\n    this.setState({isFetching: true});\n    this.fetchData();\n    //this.fetchPostIt();\n    console.log(\"Hello?\");\n    // Will. put jquery stuff there\n    // https://reactjs.org/docs/integrating-with-other-libraries.html\n  }\n\n  addSticky = (value, isImage) => {\n    this.setState(state => {\n      const randColor = this.state.colors[Math.floor(Math.random()*this.state.colors.length)];\n      const stickies = state.stickies.concat({isImage: isImage, message: value, color: randColor});\n      /*value, color, x, y, isImage, imageValue*/\n      this.sendPostIt(isImage ? \"\" : value, randColor, 0, 0, !isImage, isImage ? value : 0);\n      this.fetchPostIt(); //.then(()=>{console.log(finalArray)});\n      return {stickies};\n    });\n  }\n  handleChange(e) {\n    this.setState({value: e.target.value});\n  }\n  handleSubmit(e) {\n    this.addSticky(this.state.value, false);\n    this.setState({value: ''});\n    /*this.setState((message) => { \n      let stickyMessage = e.target.value;\n      alert(stickyMessage);\n      return {stickyMessage}\n    });*/\n    //alert(this.state.stickyMessage);\n    e.preventDefault();\n  }\n\n  updateDrawing(drawing) {\n    console.log(drawing);\n    this.setState({drawingUrl: drawing});\n    this.addSticky(drawing, true);\n  }\n  \n  sendPostIt(value, color, x, y, isImage, imageValue){\n    /*\n    var request = new XMLHttpRequest();\n    request.open('GET', '/my/url', true);\n\n    request.onload = function() {\n      if (request.status >= 200 && request.status < 400) {\n        // Success!\n        var data = JSON.parse(request.responseText);\n      } else {\n        // We reached our target server, but it returned an error\n\n      }\n    };\n\n    request.onerror = function() {\n      // There was a connection error of some sort\n    };\n\n    request.send();\n    */\n    if(isImage){\n      $.getJSON(\"http://localhost:5000/postpostit?value=\" + value + \"&color=\" + color + \"&x=\" + x + \"&y=\" +y + \"&imageValue=\"+imageValue, ()=>{})\n      /*\n      // change parameters to just \"sticky\"\n      $.getJSON(\"http://localhost:5000/postpostit?isImage=\" + sticky.isImage + \"&message=\" + sticky.message + \"&color=\" + sticky.color + \"&x=\" + 0 + \"&y=\" + 0, ()=>{})\n      */\n    } else {\n      $.getJSON(\"http://localhost:5000/postpostit?value=\" + value + \"&color=\" + color + \"&x=\" + x + \"&y=\" +y, ()=>{})\n    }\n  }\n  fetchPostIt(){\n    /*fetch(`http://localhost:5000/postit.json`)\n      .then(res => res.json())\n      .then(json => {\n        console.log(json);\n        this.setState({ data: json });\n      });*/\n    /*$.getJSON(\"http://localhost:5000/postit.json\", data=>{\n      //not hacky code shut up\n      let i = 0;\n \n      console.log(data);\n      let iterator = 0;\n      // let index = 0;\n      let addThis = {};\n \n      console.log(Object.keys(data));\n      console.log(Object.keys(data).length);\n      for(var index = 0; index < Object.keys(data).length; index++){\n        if(iterator==0){\n          addThis.name = data[Object.keys(data)[index]].value;\n          console.log(data[Object.keys(data)[index]].value);\n          iterator++;\n        }else if(iterator==1){\n          addThis.color = data[Object.keys(data)[index]].color;\n          console.log(addThis.color);\n          iterator++;\n        }else if(iterator==2){\n          addThis.x = data[Object.keys(data)[index]].x;\n          console.log(addThis.x);\n          iterator++;\n        }else if(iterator==3){\n          addThis.y = data[Object.keys(data)[index]].y;\n          console.log(addThis.y);\n          iterator++;\n        }else if(iterator==4){\n          console.log(addThis);\n          \n          addThis.imageValue =  data[Object.keys(data)[index]].imageValue;\n          finalArray[i] = addThis; addThis = {}; i++;\n          iterator = 0;\n        }\n      }\n    })*/\n  }\n  \n  render() {\n    return (\n      <ChakraProvider theme={theme}>\n        <Box textAlign=\"center\" fontSize=\"xl\">\n          <Grid minH=\"100vh\" p={3}>\n            <ColorModeSwitcher justifySelf=\"flex-end\" />\n            <VStack spacing={8}>\n              <StickyGrid stickies={this.state.stickies} /> {/*handleSubmit={drawing => this.updateDrawing(drawing)}*/}\n              <Box position=\"absolute\" top=\"10\">\n                <Text>{'« '}\n                  {this.state.isFetching\n                    ? 'Fetching message from API'\n                    : this.state.message}\n                {' »'}</Text>\n              </Box>\n              <Box position=\"absolute\" bottom=\"10\">\n                <form onSubmit={this.handleSubmit} style={{display: 'inline-block'}}>\n                  <Input placeholder=\"Enter message\" value={this.state.value} onChange={this.handleChange}></Input>\n                </form>\n                <DrawModal\n                  handleSubmit={(drawing) => this.updateDrawing(drawing)}\n                />\n              </Box>\n              {/*{ process.env.NODE_ENV === 'production' ?\n                  <Text>\n                    This is a production build from create-react-app.\n                  </Text>\n                : <Text>\n                    Edit <Code fontSize=\"xl\">src/App.js</Code> and save to reload.\n                  </Text>\n              }\n              <Text>{'« '}\n              {this.state.isFetching\n                ? 'Fetching message from API'\n                : this.state.message}\n              {' »'}</Text>\n              <Link\n                color=\"teal.500\"\n                href=\"https://chakra-ui.com\"\n                fontSize=\"2xl\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Learn Chakra\n              </Link>*/}\n            </VStack>\n          </Grid>\n        </Box>\n      </ChakraProvider>\n    );\n  }\n}\n\nexport default App;\n/*\nimport React, { useCallback, useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const [message, setMessage] = useState(null);\n  const [isFetching, setIsFetching] = useState(false);\n  const [url, setUrl] = useState('/api');\n\n  const fetchData = useCallback(() => {\n    fetch(url)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`status ${response.status}`);\n        }\n        return response.json();\n      })\n      .then(json => {\n        setMessage(json.message);\n        setIsFetching(false);\n      }).catch(e => {\n        setMessage(`API call failed: ${e}`);\n        setIsFetching(false);\n      })\n  }, [url]);\n\n  useEffect(() => {\n    setIsFetching(true);\n    fetchData();\n  }, [fetchData]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        { process.env.NODE_ENV === 'production' ?\n            <p>\n              This is a production build from create-react-app.\n            </p>\n          : <p>\n              Edit <code>src/App.js</code> and save to reload.\n            </p>\n        }\n        <p>{'« '}<strong>\n          {isFetching\n            ? 'Fetching message from API'\n            : message}\n        </strong>{' »'}</p>\n        <p><a\n          className=\"App-link\"\n          href=\"https://github.com/mars/heroku-cra-node\"\n        >\n          React + Node deployment on Heroku\n        </a></p>\n        <p><a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a></p>\n      </header>\n    </div>\n  );\n\n}\n\nexport default App;\n*/","/Users/ronald/github/lennon-wall/react-ui/src/serviceWorker.js",[],"/Users/ronald/github/lennon-wall/react-ui/src/ColorModeSwitcher.js",[],"/Users/ronald/github/lennon-wall/react-ui/src/Logo.js",[],["54","55"],"/Users/ronald/github/lennon-wall/react-ui/src/components/StickyGrid.js",[],"/Users/ronald/github/lennon-wall/react-ui/src/components/DrawModal.js",[],{"ruleId":"56","severity":1,"message":"57","line":18,"column":15,"nodeType":"58","messageId":"59","endLine":18,"endColumn":21},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"56","severity":1,"message":"64","line":18,"column":5,"nodeType":"58","messageId":"59","endLine":18,"endColumn":15},{"ruleId":"60","replacedBy":"65"},{"ruleId":"62","replacedBy":"66"},"no-unused-vars","'setUrl' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["67"],"no-negated-in-lhs",["68"],"'finalArray' is assigned a value but never used.",["67"],["68"],"no-global-assign","no-unsafe-negation"]